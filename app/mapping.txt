android.support.v4.app.ActivityCompat -> a.a.a.a.a:
    void requestPermissions(android.app.Activity,java.lang.String[],int) -> a
android.support.v4.app.ActivityCompat$1 -> a.a.a.a.b:
    java.lang.String[] val$permissions -> a
    android.app.Activity val$activity -> b
    int val$requestCode -> c
    void <init>(java.lang.String[],android.app.Activity,int) -> <init>
    void run() -> run
android.support.v4.app.ActivityCompat$OnRequestPermissionsResultCallback -> a.a.a.a.c:
    void onRequestPermissionsResult(int,java.lang.String[],int[]) -> a
android.support.v4.app.ActivityCompatApi23 -> a.a.a.a.d:
    void requestPermissions(android.app.Activity,java.lang.String[],int) -> a
android.support.v4.app.ActivityCompatApi23$RequestPermissionsRequestCodeValidator -> a.a.a.a.e:
    void validateRequestPermissionsRequestCode(int) -> a
android.support.v4.app.NotificationBuilderWithActions -> a.a.a.a.f:
    void addAction(android.support.v4.app.NotificationCompatBase$Action) -> a
android.support.v4.app.NotificationBuilderWithBuilderAccessor -> a.a.a.a.g:
    android.app.Notification$Builder getBuilder() -> a
    android.app.Notification build() -> b
android.support.v4.app.NotificationCompat -> a.a.a.a.h:
    android.support.v4.app.NotificationCompat$NotificationCompatImpl IMPL -> a
    void addActionsToBuilder(android.support.v4.app.NotificationBuilderWithActions,java.util.ArrayList) -> b
    void addStyleToBuilderJellybean(android.support.v4.app.NotificationBuilderWithBuilderAccessor,android.support.v4.app.NotificationCompat$Style) -> b
    void access$000(android.support.v4.app.NotificationBuilderWithActions,java.util.ArrayList) -> a
    void access$100(android.support.v4.app.NotificationBuilderWithBuilderAccessor,android.support.v4.app.NotificationCompat$Style) -> a
    android.support.v4.app.NotificationCompat$NotificationCompatImpl access$200() -> a
    void <clinit>() -> <clinit>
android.support.v4.app.NotificationCompat$Action -> a.a.a.a.i:
    android.os.Bundle mExtras -> e
    android.support.v4.app.RemoteInput[] mRemoteInputs -> f
    int icon -> a
    java.lang.CharSequence title -> b
    android.app.PendingIntent actionIntent -> c
    android.support.v4.app.NotificationCompatBase$Action$Factory FACTORY -> d
    int getIcon() -> a
    java.lang.CharSequence getTitle() -> b
    android.app.PendingIntent getActionIntent() -> c
    android.os.Bundle getExtras() -> d
    android.support.v4.app.RemoteInput[] getRemoteInputs() -> e
    android.support.v4.app.RemoteInputCompatBase$RemoteInput[] getRemoteInputs() -> f
    void <clinit>() -> <clinit>
android.support.v4.app.NotificationCompat$Action$1 -> a.a.a.a.j:
    void <init>() -> <init>
android.support.v4.app.NotificationCompat$BigPictureStyle -> a.a.a.a.k:
    android.graphics.Bitmap mPicture -> a
    android.graphics.Bitmap mBigLargeIcon -> b
    boolean mBigLargeIconSet -> c
    void <init>() -> <init>
android.support.v4.app.NotificationCompat$BigTextStyle -> a.a.a.a.l:
    java.lang.CharSequence mBigText -> a
    void <init>() -> <init>
    android.support.v4.app.NotificationCompat$BigTextStyle setBigContentTitle(java.lang.CharSequence) -> a
    android.support.v4.app.NotificationCompat$BigTextStyle setSummaryText(java.lang.CharSequence) -> b
    android.support.v4.app.NotificationCompat$BigTextStyle bigText(java.lang.CharSequence) -> c
android.support.v4.app.NotificationCompat$Builder -> a.a.a.a.m:
    android.content.Context mContext -> a
    java.lang.CharSequence mContentTitle -> b
    java.lang.CharSequence mContentText -> c
    android.app.PendingIntent mContentIntent -> d
    android.app.PendingIntent mFullScreenIntent -> e
    android.widget.RemoteViews mTickerView -> f
    android.graphics.Bitmap mLargeIcon -> g
    java.lang.CharSequence mContentInfo -> h
    int mNumber -> i
    int mPriority -> j
    boolean mShowWhen -> k
    boolean mUseChronometer -> l
    android.support.v4.app.NotificationCompat$Style mStyle -> m
    java.lang.CharSequence mSubText -> n
    int mProgressMax -> o
    int mProgress -> p
    boolean mProgressIndeterminate -> q
    java.lang.String mGroupKey -> r
    boolean mGroupSummary -> s
    java.lang.String mSortKey -> t
    java.util.ArrayList mActions -> u
    boolean mLocalOnly -> v
    java.lang.String mCategory -> w
    android.os.Bundle mExtras -> x
    int mColor -> y
    int mVisibility -> z
    android.app.Notification mPublicVersion -> A
    android.app.Notification mNotification -> B
    java.util.ArrayList mPeople -> C
    void <init>(android.content.Context) -> <init>
    android.support.v4.app.NotificationCompat$Builder setSmallIcon(int) -> a
    android.support.v4.app.NotificationCompat$Builder setContentTitle(java.lang.CharSequence) -> a
    android.support.v4.app.NotificationCompat$Builder setContentText(java.lang.CharSequence) -> b
    android.support.v4.app.NotificationCompat$Builder setContentInfo(java.lang.CharSequence) -> c
    android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent) -> a
    android.support.v4.app.NotificationCompat$Builder setLargeIcon(android.graphics.Bitmap) -> a
    android.support.v4.app.NotificationCompat$Builder setAutoCancel(boolean) -> a
    android.support.v4.app.NotificationCompat$Builder setCategory(java.lang.String) -> a
    android.support.v4.app.NotificationCompat$Builder setDefaults(int) -> b
    void setFlag(int,boolean) -> a
    android.support.v4.app.NotificationCompat$Builder setPriority(int) -> c
    android.support.v4.app.NotificationCompat$Builder setStyle(android.support.v4.app.NotificationCompat$Style) -> a
    android.app.Notification build() -> a
    android.support.v4.app.NotificationCompat$BuilderExtender getExtender() -> b
    java.lang.CharSequence limitCharSequenceLength(java.lang.CharSequence) -> d
android.support.v4.app.NotificationCompat$BuilderExtender -> a.a.a.a.n:
    void <init>() -> <init>
    android.app.Notification build(android.support.v4.app.NotificationCompat$Builder,android.support.v4.app.NotificationBuilderWithBuilderAccessor) -> a
android.support.v4.app.NotificationCompat$InboxStyle -> a.a.a.a.o:
    java.util.ArrayList mTexts -> a
    void <init>() -> <init>
android.support.v4.app.NotificationCompat$NotificationCompatImpl -> a.a.a.a.p:
    android.app.Notification build(android.support.v4.app.NotificationCompat$Builder,android.support.v4.app.NotificationCompat$BuilderExtender) -> a
android.support.v4.app.NotificationCompat$NotificationCompatImplApi20 -> a.a.a.a.q:
    void <init>() -> <init>
    android.app.Notification build(android.support.v4.app.NotificationCompat$Builder,android.support.v4.app.NotificationCompat$BuilderExtender) -> a
android.support.v4.app.NotificationCompat$NotificationCompatImplApi21 -> a.a.a.a.r:
    void <init>() -> <init>
    android.app.Notification build(android.support.v4.app.NotificationCompat$Builder,android.support.v4.app.NotificationCompat$BuilderExtender) -> a
android.support.v4.app.NotificationCompat$NotificationCompatImplBase -> a.a.a.a.s:
    void <init>() -> <init>
    android.app.Notification build(android.support.v4.app.NotificationCompat$Builder,android.support.v4.app.NotificationCompat$BuilderExtender) -> a
android.support.v4.app.NotificationCompat$NotificationCompatImplGingerbread -> a.a.a.a.t:
    void <init>() -> <init>
    android.app.Notification build(android.support.v4.app.NotificationCompat$Builder,android.support.v4.app.NotificationCompat$BuilderExtender) -> a
android.support.v4.app.NotificationCompat$NotificationCompatImplHoneycomb -> a.a.a.a.u:
    void <init>() -> <init>
    android.app.Notification build(android.support.v4.app.NotificationCompat$Builder,android.support.v4.app.NotificationCompat$BuilderExtender) -> a
android.support.v4.app.NotificationCompat$NotificationCompatImplIceCreamSandwich -> a.a.a.a.v:
    void <init>() -> <init>
    android.app.Notification build(android.support.v4.app.NotificationCompat$Builder,android.support.v4.app.NotificationCompat$BuilderExtender) -> a
android.support.v4.app.NotificationCompat$NotificationCompatImplJellybean -> a.a.a.a.w:
    void <init>() -> <init>
    android.app.Notification build(android.support.v4.app.NotificationCompat$Builder,android.support.v4.app.NotificationCompat$BuilderExtender) -> a
android.support.v4.app.NotificationCompat$NotificationCompatImplKitKat -> a.a.a.a.x:
    void <init>() -> <init>
    android.app.Notification build(android.support.v4.app.NotificationCompat$Builder,android.support.v4.app.NotificationCompat$BuilderExtender) -> a
android.support.v4.app.NotificationCompat$Style -> a.a.a.a.y:
    android.support.v4.app.NotificationCompat$Builder mBuilder -> d
    java.lang.CharSequence mBigContentTitle -> e
    java.lang.CharSequence mSummaryText -> f
    boolean mSummaryTextSet -> g
    void <init>() -> <init>
    void setBuilder(android.support.v4.app.NotificationCompat$Builder) -> a
android.support.v4.app.NotificationCompatApi20 -> a.a.a.a.z:
    void addAction(android.app.Notification$Builder,android.support.v4.app.NotificationCompatBase$Action) -> a
android.support.v4.app.NotificationCompatApi20$Builder -> a.a.a.a.aa:
    android.app.Notification$Builder b -> a
    android.os.Bundle mExtras -> b
    void <init>(android.content.Context,android.app.Notification,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,android.widget.RemoteViews,int,android.app.PendingIntent,android.app.PendingIntent,android.graphics.Bitmap,int,int,boolean,boolean,boolean,int,java.lang.CharSequence,boolean,java.util.ArrayList,android.os.Bundle,java.lang.String,boolean,java.lang.String) -> <init>
    void addAction(android.support.v4.app.NotificationCompatBase$Action) -> a
    android.app.Notification$Builder getBuilder() -> a
    android.app.Notification build() -> b
android.support.v4.app.NotificationCompatApi21 -> a.a.a.a.ab:
android.support.v4.app.NotificationCompatApi21$Builder -> a.a.a.a.ac:
    android.app.Notification$Builder b -> a
    void <init>(android.content.Context,android.app.Notification,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,android.widget.RemoteViews,int,android.app.PendingIntent,android.app.PendingIntent,android.graphics.Bitmap,int,int,boolean,boolean,boolean,int,java.lang.CharSequence,boolean,java.lang.String,java.util.ArrayList,android.os.Bundle,int,int,android.app.Notification,java.lang.String,boolean,java.lang.String) -> <init>
    void addAction(android.support.v4.app.NotificationCompatBase$Action) -> a
    android.app.Notification$Builder getBuilder() -> a
    android.app.Notification build() -> b
android.support.v4.app.NotificationCompatBase -> a.a.a.a.ad:
android.support.v4.app.NotificationCompatBase$Action -> a.a.a.a.ae:
    int getIcon() -> a
    java.lang.CharSequence getTitle() -> b
    android.app.PendingIntent getActionIntent() -> c
    android.os.Bundle getExtras() -> d
    android.support.v4.app.RemoteInputCompatBase$RemoteInput[] getRemoteInputs() -> f
android.support.v4.app.NotificationCompatBase$Action$Factory -> a.a.a.a.af:
android.support.v4.app.NotificationCompatGingerbread -> a.a.a.a.ag:
    android.app.Notification add(android.app.Notification,android.content.Context,java.lang.CharSequence,java.lang.CharSequence,android.app.PendingIntent,android.app.PendingIntent) -> a
android.support.v4.app.NotificationCompatHoneycomb -> a.a.a.a.ah:
    android.app.Notification add(android.content.Context,android.app.Notification,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,android.widget.RemoteViews,int,android.app.PendingIntent,android.app.PendingIntent,android.graphics.Bitmap) -> a
android.support.v4.app.NotificationCompatIceCreamSandwich -> a.a.a.a.ai:
android.support.v4.app.NotificationCompatIceCreamSandwich$Builder -> a.a.a.a.aj:
    android.app.Notification$Builder b -> a
    void <init>(android.content.Context,android.app.Notification,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,android.widget.RemoteViews,int,android.app.PendingIntent,android.app.PendingIntent,android.graphics.Bitmap,int,int,boolean) -> <init>
    android.app.Notification$Builder getBuilder() -> a
    android.app.Notification build() -> b
android.support.v4.app.NotificationCompatJellybean -> a.a.a.a.ak:
    java.lang.Object sExtrasLock -> a
    java.lang.reflect.Field sExtrasField -> b
    boolean sExtrasFieldAccessFailed -> c
    java.lang.Object sActionsLock -> d
    void addBigTextStyle(android.support.v4.app.NotificationBuilderWithBuilderAccessor,java.lang.CharSequence,boolean,java.lang.CharSequence,java.lang.CharSequence) -> a
    void addBigPictureStyle(android.support.v4.app.NotificationBuilderWithBuilderAccessor,java.lang.CharSequence,boolean,java.lang.CharSequence,android.graphics.Bitmap,android.graphics.Bitmap,boolean) -> a
    void addInboxStyle(android.support.v4.app.NotificationBuilderWithBuilderAccessor,java.lang.CharSequence,boolean,java.lang.CharSequence,java.util.ArrayList) -> a
    android.util.SparseArray buildActionExtrasMap(java.util.List) -> a
    android.os.Bundle getExtras(android.app.Notification) -> a
    android.os.Bundle writeActionAndGetExtras(android.app.Notification$Builder,android.support.v4.app.NotificationCompatBase$Action) -> a
    void <clinit>() -> <clinit>
android.support.v4.app.NotificationCompatJellybean$Builder -> a.a.a.a.al:
    android.app.Notification$Builder b -> a
    android.os.Bundle mExtras -> b
    java.util.List mActionExtrasList -> c
    void <init>(android.content.Context,android.app.Notification,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,android.widget.RemoteViews,int,android.app.PendingIntent,android.app.PendingIntent,android.graphics.Bitmap,int,int,boolean,boolean,int,java.lang.CharSequence,boolean,android.os.Bundle,java.lang.String,boolean,java.lang.String) -> <init>
    void addAction(android.support.v4.app.NotificationCompatBase$Action) -> a
    android.app.Notification$Builder getBuilder() -> a
    android.app.Notification build() -> b
android.support.v4.app.NotificationCompatKitKat -> a.a.a.a.am:
android.support.v4.app.NotificationCompatKitKat$Builder -> a.a.a.a.an:
    android.app.Notification$Builder b -> a
    android.os.Bundle mExtras -> b
    java.util.List mActionExtrasList -> c
    void <init>(android.content.Context,android.app.Notification,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,android.widget.RemoteViews,int,android.app.PendingIntent,android.app.PendingIntent,android.graphics.Bitmap,int,int,boolean,boolean,boolean,int,java.lang.CharSequence,boolean,java.util.ArrayList,android.os.Bundle,java.lang.String,boolean,java.lang.String) -> <init>
    void addAction(android.support.v4.app.NotificationCompatBase$Action) -> a
    android.app.Notification$Builder getBuilder() -> a
    android.app.Notification build() -> b
android.support.v4.app.RemoteInput -> a.a.a.a.ao:
    java.lang.String mResultKey -> b
    java.lang.CharSequence mLabel -> c
    java.lang.CharSequence[] mChoices -> d
    boolean mAllowFreeFormInput -> e
    android.os.Bundle mExtras -> f
    android.support.v4.app.RemoteInput$Impl IMPL -> g
    android.support.v4.app.RemoteInputCompatBase$RemoteInput$Factory FACTORY -> a
    java.lang.String getResultKey() -> a
    java.lang.CharSequence getLabel() -> b
    java.lang.CharSequence[] getChoices() -> c
    boolean getAllowFreeFormInput() -> d
    android.os.Bundle getExtras() -> e
    void <clinit>() -> <clinit>
android.support.v4.app.RemoteInput$1 -> a.a.a.a.ap:
    void <init>() -> <init>
android.support.v4.app.RemoteInput$Impl -> a.a.a.a.aq:
android.support.v4.app.RemoteInput$ImplApi20 -> a.a.a.a.ar:
    void <init>() -> <init>
android.support.v4.app.RemoteInput$ImplBase -> a.a.a.a.as:
    void <init>() -> <init>
android.support.v4.app.RemoteInput$ImplJellybean -> a.a.a.a.at:
    void <init>() -> <init>
android.support.v4.app.RemoteInputCompatApi20 -> a.a.a.a.au:
    android.app.RemoteInput[] fromCompat(android.support.v4.app.RemoteInputCompatBase$RemoteInput[]) -> a
android.support.v4.app.RemoteInputCompatBase -> a.a.a.a.av:
android.support.v4.app.RemoteInputCompatBase$RemoteInput -> a.a.a.a.aw:
    java.lang.String getResultKey() -> a
    java.lang.CharSequence getLabel() -> b
    java.lang.CharSequence[] getChoices() -> c
    boolean getAllowFreeFormInput() -> d
    android.os.Bundle getExtras() -> e
android.support.v4.app.RemoteInputCompatBase$RemoteInput$Factory -> a.a.a.a.ax:
android.support.v4.app.RemoteInputCompatJellybean -> a.a.a.a.ay:
    android.os.Bundle toBundle(android.support.v4.app.RemoteInputCompatBase$RemoteInput) -> a
    android.os.Bundle[] toBundleArray(android.support.v4.app.RemoteInputCompatBase$RemoteInput[]) -> a
android.support.v4.content.ContextCompat -> a.a.a.b.a:
    int checkSelfPermission(android.content.Context,java.lang.String) -> a
com.mokee.mms.utils.CaptchasUtils -> b.a.a.a.a:
    java.lang.String[] g -> b
    java.lang.String[] d -> c
    java.lang.String[] f -> d
    java.lang.String[] c -> e
    java.lang.String[] e -> f
    int b -> a
    java.lang.String[] a -> g
    void <clinit>() -> <clinit>
    boolean isCaptchasMessage(java.lang.String) -> a
    boolean isCaptchasEnMessage(java.lang.String) -> b
    boolean isChineseContains(java.lang.String) -> c
    java.lang.String tryToGetCnCaptchas(java.lang.String) -> d
    java.lang.String tryToGetEnCaptchas(java.lang.String) -> e
    int a(java.lang.String) -> f
    boolean b(java.lang.String,java.lang.String) -> b
    boolean a(java.lang.String,java.lang.String) -> c
    boolean c(java.lang.String,java.lang.String) -> d
    java.lang.String getCaptchaProvider(java.lang.String,java.lang.String) -> a
    java.lang.String a(java.lang.String,java.lang.String,java.lang.String) -> a
com.mokee.volley.VolleyError -> b.a.b.a:
    boolean b -> a
com.readystatesoftware.systembartint.SystemBarTintManager -> b.b.a.a:
    java.lang.String sNavBarOverride -> a
    com.readystatesoftware.systembartint.SystemBarTintManager$SystemBarConfig mConfig -> b
    boolean mStatusBarAvailable -> c
    boolean mNavBarAvailable -> d
    boolean mStatusBarTintEnabled -> e
    android.view.View mStatusBarTintView -> f
    android.view.View mNavBarTintView -> g
    void <init>(android.app.Activity) -> <init>
    void setStatusBarTintEnabled(boolean) -> a
    void setStatusBarTintResource(int) -> a
    void setupStatusBarView(android.content.Context,android.view.ViewGroup) -> a
    void setupNavBarView(android.content.Context,android.view.ViewGroup) -> b
    java.lang.String access$100() -> a
    void <clinit>() -> <clinit>
com.readystatesoftware.systembartint.SystemBarTintManager$1 -> b.b.a.b:
com.readystatesoftware.systembartint.SystemBarTintManager$SystemBarConfig -> b.b.a.c:
    boolean mTranslucentStatusBar -> a
    boolean mTranslucentNavBar -> b
    int mStatusBarHeight -> c
    int mActionBarHeight -> d
    boolean mHasNavigationBar -> e
    int mNavigationBarHeight -> f
    int mNavigationBarWidth -> g
    boolean mInPortrait -> h
    float mSmallestWidthDp -> i
    void <init>(android.app.Activity,boolean,boolean) -> <init>
    int getActionBarHeight(android.content.Context) -> a
    int getNavigationBarHeight(android.content.Context) -> b
    int getNavigationBarWidth(android.content.Context) -> c
    boolean hasNavBar(android.content.Context) -> d
    int getInternalDimensionSize(android.content.res.Resources,java.lang.String) -> a
    float getSmallestWidthDp(android.app.Activity) -> a
    boolean isNavigationAtBottom() -> a
    int getStatusBarHeight() -> b
    boolean hasNavigtionBar() -> c
    int getNavigationBarHeight() -> d
    int getNavigationBarWidth() -> e
    void <init>(android.app.Activity,boolean,boolean,com.readystatesoftware.systembartint.SystemBarTintManager$1) -> <init>
me.gitai.library.utils.SharedPreferencesUtil -> me.gitai.a.a.a:
    android.content.Context ctx -> a
    void initialize(android.content.Context) -> a
    android.content.SharedPreferences getInstence(java.lang.String) -> a
    android.content.SharedPreferences$Editor getEditor(java.lang.String) -> b
me.gitai.library.utils.StringUtils -> me.gitai.a.a.b:
    char[] HEX_DIGITS -> a
    boolean isEmpty(java.lang.CharSequence) -> a
    boolean isEmpty(java.util.Set) -> a
    java.lang.String join(java.util.Collection,java.lang.String) -> a
    void <clinit>() -> <clinit>
me.gitai.library.utils.ToastUtil -> me.gitai.a.a.c:
    android.app.Application sContext -> a
    void <init>() -> <init>
    void initialize(android.app.Application) -> a
    android.app.Application getContext() -> a
    void show(int) -> a
    void showId(int,java.lang.Object[]) -> a
    void show(java.lang.String) -> a
me.gitai.library.widget.MaterialDialog -> me.gitai.a.b.a:
    boolean mCancel -> a
    android.content.Context mContext -> b
    android.app.AlertDialog mAlertDialog -> c
    me.gitai.library.widget.MaterialDialog$Builder mBuilder -> d
    android.view.View mView -> e
    int mTitleResId -> f
    java.lang.CharSequence mTitle -> g
    int mMessageResId -> h
    java.lang.CharSequence mMessage -> i
    android.widget.Button mPositiveButton -> j
    android.widget.LinearLayout$LayoutParams mLayoutParams -> k
    android.widget.Button mNegativeButton -> l
    boolean mHasShow -> m
    android.graphics.drawable.Drawable mBackgroundDrawable -> n
    int mBackgroundResId -> o
    android.view.View mMessageContentView -> p
    android.content.DialogInterface$OnDismissListener mOnDismissListener -> q
    void <init>(android.content.Context) -> <init>
    void show() -> a
    me.gitai.library.widget.MaterialDialog setContentView(int,me.gitai.library.widget.MaterialDialog$OnViewInflateListener) -> a
    me.gitai.library.widget.MaterialDialog setContentView(android.view.View) -> a
    void dismiss() -> b
    int dip2px(float) -> a
    boolean isLollipop() -> c
    me.gitai.library.widget.MaterialDialog setTitle(java.lang.CharSequence) -> a
    me.gitai.library.widget.MaterialDialog setMessage(int) -> a
    me.gitai.library.widget.MaterialDialog setMessage(java.lang.CharSequence) -> b
    me.gitai.library.widget.MaterialDialog setPositiveButton(int,me.gitai.library.widget.MaterialDialog$OnClickListener) -> a
    me.gitai.library.widget.MaterialDialog setNegativeButton(int,me.gitai.library.widget.MaterialDialog$OnClickListener) -> b
    android.view.View access$100(me.gitai.library.widget.MaterialDialog) -> a
    android.app.AlertDialog access$202(me.gitai.library.widget.MaterialDialog,android.app.AlertDialog) -> a
    android.content.Context access$300(me.gitai.library.widget.MaterialDialog) -> b
    android.app.AlertDialog access$200(me.gitai.library.widget.MaterialDialog) -> c
    int access$400(me.gitai.library.widget.MaterialDialog) -> d
    java.lang.CharSequence access$500(me.gitai.library.widget.MaterialDialog) -> e
    int access$600(me.gitai.library.widget.MaterialDialog) -> f
    java.lang.CharSequence access$700(me.gitai.library.widget.MaterialDialog) -> g
    android.widget.Button access$800(me.gitai.library.widget.MaterialDialog) -> h
    android.widget.LinearLayout$LayoutParams access$900(me.gitai.library.widget.MaterialDialog) -> i
    android.widget.Button access$1000(me.gitai.library.widget.MaterialDialog) -> j
    int access$1100(me.gitai.library.widget.MaterialDialog,float) -> a
    int access$1200(me.gitai.library.widget.MaterialDialog) -> k
    android.graphics.drawable.Drawable access$1300(me.gitai.library.widget.MaterialDialog) -> l
    android.view.View access$1400(me.gitai.library.widget.MaterialDialog) -> m
    boolean access$1500(me.gitai.library.widget.MaterialDialog) -> n
    android.content.DialogInterface$OnDismissListener access$1600(me.gitai.library.widget.MaterialDialog) -> o
me.gitai.library.widget.MaterialDialog$1 -> me.gitai.a.b.b:
    me.gitai.library.widget.MaterialDialog$OnClickListener val$listener -> a
    me.gitai.library.widget.MaterialDialog this$0 -> b
    void <init>(me.gitai.library.widget.MaterialDialog,me.gitai.library.widget.MaterialDialog$OnClickListener) -> <init>
    void onClick(android.view.View) -> onClick
me.gitai.library.widget.MaterialDialog$3 -> me.gitai.a.b.c:
    me.gitai.library.widget.MaterialDialog$OnClickListener val$listener -> a
    me.gitai.library.widget.MaterialDialog this$0 -> b
    void <init>(me.gitai.library.widget.MaterialDialog,me.gitai.library.widget.MaterialDialog$OnClickListener) -> <init>
    void onClick(android.view.View) -> onClick
me.gitai.library.widget.MaterialDialog$Builder -> me.gitai.a.b.d:
    android.widget.TextView mTitleView -> b
    android.widget.TextView mMessageView -> c
    android.view.Window mAlertDialogWindow -> d
    android.widget.LinearLayout mButtonLayout -> e
    me.gitai.library.widget.MaterialDialog this$0 -> a
    void <init>(me.gitai.library.widget.MaterialDialog) -> <init>
    void setTitle(int) -> a
    void setTitle(java.lang.CharSequence) -> a
    void setMessage(int) -> b
    void setMessage(java.lang.CharSequence) -> b
    void setContentView(android.view.View) -> a
    void <init>(me.gitai.library.widget.MaterialDialog,me.gitai.library.widget.MaterialDialog$1) -> <init>
me.gitai.library.widget.MaterialDialog$OnClickListener -> me.gitai.a.b.e:
    boolean onClick(android.view.View,android.view.View) -> a
me.gitai.library.widget.MaterialDialog$OnViewInflateListener -> me.gitai.a.b.f:
    boolean onInflate(android.view.View) -> a
me.gitai.smscodehelper.MainPreferences -> me.gitai.smscodehelper.MainPreferences:
    android.preference.SwitchPreference preference_hide_launcher_icon -> a
    boolean hidden_launcher_icon -> b
    void <init>() -> <init>
    void onCreate(android.os.Bundle) -> onCreate
    boolean onPreferenceChange(android.preference.Preference,java.lang.Object) -> onPreferenceChange
    void onRequestPermissionsResult(int,java.lang.String[],int[]) -> onRequestPermissionsResult
    void setFitsSystemWindows(boolean) -> a
    void setTranslucentStatus(boolean) -> b
    void getPermission(java.lang.String) -> a
    void access$000(me.gitai.smscodehelper.MainPreferences,java.lang.String) -> a
me.gitai.smscodehelper.MainPreferences$1 -> me.gitai.smscodehelper.a:
    me.gitai.smscodehelper.MainPreferences this$0 -> a
    void <init>(me.gitai.smscodehelper.MainPreferences) -> <init>
    boolean onClick(android.view.View,android.view.View) -> a
me.gitai.smscodehelper.MainPreferences$2 -> me.gitai.smscodehelper.b:
    me.gitai.smscodehelper.MainPreferences this$0 -> a
    void <init>(me.gitai.smscodehelper.MainPreferences) -> <init>
    boolean onClick(android.view.View,android.view.View) -> a
me.gitai.smscodehelper.R -> me.gitai.smscodehelper.c:
me.gitai.smscodehelper.R$styleable -> me.gitai.smscodehelper.d:
    int[] preference -> preference
    int preference_hint -> preference_hint
    int preference_text -> preference_text
    void <clinit>() -> <clinit>
me.gitai.smscodehelper.SMSApp -> me.gitai.smscodehelper.SMSApp:
    void <init>() -> <init>
    void onCreate() -> onCreate
me.gitai.smscodehelper.bean.SMSInfo -> me.gitai.smscodehelper.a.a:
    java.lang.String _id -> a
    java.lang.String thread_id -> b
    java.lang.String smsAddress -> c
    java.lang.String smsBody -> d
    java.lang.String read -> e
    java.lang.String action -> f
    java.lang.String sender -> g
    java.lang.String code -> h
    void <init>() -> <init>
    void <init>(java.lang.String,java.lang.String) -> <init>
me.gitai.smscodehelper.receiver.CopyReceiver -> me.gitai.smscodehelper.receiver.CopyReceiver:
    void <init>() -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
me.gitai.smscodehelper.receiver.SMSBroadcastReceiver -> me.gitai.smscodehelper.receiver.SMSBroadcastReceiver:
    void <init>() -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    void notification(android.content.Context,me.gitai.smscodehelper.bean.SMSInfo) -> a
me.gitai.smscodehelper.receiver.SecretCodeReceiver -> me.gitai.smscodehelper.receiver.SecretCodeReceiver:
    java.lang.String SECRET_CODE_ACTION -> a
    void <init>() -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
me.gitai.smscodehelper.utils.CommonUtil -> me.gitai.smscodehelper.b.a:
    void hideLauncher(android.app.Activity,boolean) -> a
    void hideLauncher(android.content.Context,android.content.ComponentName,boolean) -> a
me.gitai.smscodehelper.utils.Regex -> me.gitai.smscodehelper.b.b:
    java.lang.String def_keywords -> a
    java.lang.String def_provider_regexs -> b
    java.lang.String def_captchas_regexs -> c
    java.lang.String[] keywords -> d
    java.lang.String[] provider_regexs -> e
    java.lang.String[] captchas_regexs -> f
    me.gitai.smscodehelper.bean.SMSInfo smsinfo -> g
    android.content.SharedPreferences shared -> h
    void <init>(java.lang.String) -> <init>
    me.gitai.smscodehelper.bean.SMSInfo getSMSInfo() -> a
    boolean isCaptchasMessage(java.lang.String) -> a
    java.lang.String getCaptchaProvider(java.lang.String) -> b
    java.lang.String tryToGetCnCaptchas(java.lang.String) -> c
    void <clinit>() -> <clinit>
me.gitai.smscodehelper.utils.SMSCode -> me.gitai.smscodehelper.b.c:
    me.gitai.smscodehelper.bean.SMSInfo parse(java.lang.String,java.lang.String,int) -> a
    me.gitai.smscodehelper.bean.SMSInfo findByMokee(java.lang.String,java.lang.String) -> a
me.gitai.smscodehelper.utils.V1 -> me.gitai.smscodehelper.b.d:
    me.gitai.smscodehelper.bean.SMSInfo parse(java.lang.String) -> a
    java.lang.String cutSenderFromString(java.util.ArrayList,java.lang.String,java.lang.String,java.lang.String) -> a
    int findKeyWord(java.lang.String) -> b
    java.util.ArrayList findCodeSentence(java.lang.String) -> c
    boolean isCodeChar(char) -> a
    java.lang.String findCode(java.lang.String) -> d
me.gitai.smscodehelper.utils.V1$1 -> me.gitai.smscodehelper.b.e:
    void <init>() -> <init>
    int compare(java.lang.String,java.lang.String) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
me.gitai.smscodehelper.widget.EditPreference -> me.gitai.smscodehelper.widget.EditPreference:
    me.gitai.library.widget.MaterialDialog licenseDialog -> a
    android.content.Context ctx -> b
    java.lang.String def_hint -> c
    java.lang.String def_text -> d
    android.widget.EditText editText -> e
    void <init>(android.content.Context,android.util.AttributeSet,int) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.content.Context) -> <init>
    void initTypedArray(android.util.AttributeSet) -> a
    void init(android.content.Context) -> a
    boolean onPreferenceClick(android.preference.Preference) -> onPreferenceClick
me.gitai.smscodehelper.widget.EditPreference$1 -> me.gitai.smscodehelper.widget.a:
    me.gitai.smscodehelper.widget.EditPreference this$0 -> a
    void <init>(me.gitai.smscodehelper.widget.EditPreference) -> <init>
    boolean onClick(android.view.View,android.view.View) -> a
me.gitai.smscodehelper.widget.EditPreference$2 -> me.gitai.smscodehelper.widget.b:
    me.gitai.smscodehelper.widget.EditPreference this$0 -> a
    void <init>(me.gitai.smscodehelper.widget.EditPreference) -> <init>
    boolean onInflate(android.view.View) -> a
me.gitai.smscodehelper.widget.GuessPreference -> me.gitai.smscodehelper.widget.GuessPreference:
    me.gitai.library.widget.MaterialDialog licenseDialog -> b
    java.util.Set providers -> a
    void <init>(android.content.Context,android.util.AttributeSet,int) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.content.Context) -> <init>
    void init(android.content.Context) -> a
    boolean onPreferenceClick(android.preference.Preference) -> onPreferenceClick
me.gitai.smscodehelper.widget.LicensePreference -> me.gitai.smscodehelper.widget.LicensePreference:
    me.gitai.library.widget.MaterialDialog licenseDialog -> a
    void <init>(android.content.Context,android.util.AttributeSet,int) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.content.Context) -> <init>
    void init(android.content.Context) -> a
    boolean onPreferenceClick(android.preference.Preference) -> onPreferenceClick
me.gitai.smscodehelper.widget.VersionPreference -> me.gitai.smscodehelper.widget.VersionPreference:
    void <init>(android.content.Context,android.util.AttributeSet,int) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void <init>(android.content.Context) -> <init>
    void init() -> a
